<!DOCTYPE html>
<html>
<head>
  <meta charset=utf-8 />
  <title>A simple map</title>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
  <script src='https://api.mapbox.com/mapbox.js/v3.3.1/mapbox.js'></script>
  <link href='https://api.mapbox.com/mapbox.js/v3.3.1/mapbox.css' rel='stylesheet' />
  <style>
    body { position:relative; margin:0; padding:0; height: 800; bottom:100}
    #map-container {
      position: relative;
      width: 100%;
      height: 100%;
    }
    #map {
      height: 600px;
    }
  </style>
</head>

<body>

  <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/leaflet.markercluster.js'></script>
  <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.css' rel='stylesheet' />
  <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.Default.css' rel='stylesheet' />
  <style>
    #colors {
        position: absolute;
        top: 0;
        right: 0;
        background: #fff;
        width: 150px;
        padding:5px;
    }

    pre.ui-coordinates {
      position:absolute;
      bottom:-20px;
      left:10px;
      padding:5px 10px;
      background:rgba(0,0,0,0.5);
      color:#fff;
      font-size:11px;
      line-height:18px;
      border-radius:3px;
      }
      .info div {
        background:#fff;
        padding:10px;
        border-radius:3px;
        }
  </style>
  <section class="bg-secondary pb0">
    <div class="container text center">
      <div class="row">
        <div class="col-sm-10 col-sm-offset-1 text-center">
          <div class="">
          <h3>EXPLORADOR MAPA</h3>
            <div class="mb32">
            <p>En el siguiente mapa se muestran las distintas centrales de generación energética del país y los parámetros oceánicos necesarios para encontrar potencial energético por latitud y longitud.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col-sm-10 col-sm-offset-1">
      <div id="map-container">
        <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/leaflet.markercluster.js'></script>
        <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.css' rel='stylesheet' />
        <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-markercluster/v1.0.0/MarkerCluster.Default.css' rel='stylesheet' />

        <!-- Example data. -->
        <script src="/mapbox.js/assets/data/realworld.388.js"></script>

        <div id='map' class="text center" height="100%" width="100%" bottom="-200px"></div>
        <pre id='coordinates' class='ui-coordinates'></pre>
        <form id='colors'>
          <div><input type='checkbox' name='filters_all' onclick='showallStations();' value='Todas'>Todas</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Solar'>Solar</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Petróleo Diesel'>Petróleo Diesel</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Eólica'> Eólica</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Hidráulica Pasada'> Hidráulica Pasada</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Mini Hidráulica Pasada'> Mini Hidráulica Pasada</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Biogas'>Biogas</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Biomasa'>Biomasa</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Biomasa-Petróleo N°6'>Biomasa-Petróleo N°6</div>
          <div><input type='checkbox' name='filters' onclick='showStations();' value='Geotérmica'>Geotérmica</div>
        </form>


        <div id='info' class='info'></div>

        <script type="text/javascript" charset="utf-8">
          L.mapbox.accessToken = 'pk.eyJ1IjoiZnJhbmhvaGxiZXJnIiwiYSI6ImNraDRkZ21zMzAwOW0yenN6Ymp4bHR2aGQifQ.qI5VsvHPR_akHezVSgUFEA';
          var map = L.mapbox.map('map')
              .setView([-42,-74.4], 8)
              .addLayer(L.mapbox.styleLayer('mapbox://styles/mapbox/streets-v11'));



          var coordinates = document.getElementById('coordinates');

          var marker = L.marker([-42, -74.6], {
              icon: L.mapbox.marker.icon({
                'marker-color': '#f86767'
              }),
              draggable: true
          }).addTo(map);

          var geojson = <%= @geojson.to_json.html_safe %>

          var myLayer = L.mapbox.featureLayer().addTo(map);

          myLayer.setGeoJSON(geojson);

          myLayer.on('click',function(e) {
              // Force the popup closed.
              e.layer.closePopup();

              var feature = e.layer.feature;
              var content = '<div><strong>' + feature.properties.address + '</strong>' +
                            '<p>Tipo de enrgía: ' + feature.properties.tipo_energia + '<br>' +
                            'Potencia neta mega Watts: ' + feature.properties.potencia_neta_mw + '</p></div>';

              info.innerHTML = content;
          });

          // Clear the tooltip when map is clicked.
          map.on('move', empty);

          // Trigger empty contents when the script
          // has loaded on the page.
          empty();

          function empty() {
            info.innerHTML = '<div><strong>Click a marker</strong></div>';
            }


          // every time the marker is dragged, update the coordinates container
          marker.on('dragend', ondragend);

          // Set the initial marker coordinate on load.
          ondragend();

          async function ondragend() {
              var m = marker.getLatLng();

              var ele = await getElevation(m.lng, m.lat)
              var vel = await getVelocity(m.lng, m.lat)
              var velv = await getvVelocity(m.lng, m.lat)
              var pot = await getPotential(m.lng, m.lat)
              var dist = await getDistance(m.lng, m.lat)
              coordinates.innerHTML = 'POTENCIAL ENERGÉTICO HIDROCINÉTICO: ' + pot + '<br /><br />Distancia a la red eléctrica (km): ' + dist + '<br />Latitude: ' + m.lat + '<br />Longitude: ' + m.lng + '<br />Batimetría (m): ' + ele + '<br />Velocidad (m/seg): ' + vel + '<br />Velocidad Viento (m/seg): ' + velv;


          }

          // Retorna un número aleatorio entre min (incluido) y max (excluido)
          function getRandomArbitrary(min, max) {
            return Math.random() * (max - min) + min;
          }
          async function getPotential(lng, lat) {
            var pot = "MEDIO"
            if (lat < -40){
              var num_random = Math.random()
              if (num_random < 0.5){
                pot = "ALTO"
              }
              else if (num_random < 0.75){
                pot = "BAJO"
              }
            }
            else{
              if (lat < -40){
                var num_random = Math.random()
                if (num_random < 0.5){
                  pot = "BAJO"
                }
                else if (num_random < 0.75){
                  pot = "ALTO"
                }
              }
            }
            //console.log(num_random)
            return pot
          }

          async function getDistance(lng, lat) {
            if (lat < -40){
              var num_random = getRandomArbitrary(25,150)
            }
            else{
              var num_random = getRandomArbitrary(0.1, 25)
            }
            //console.log(num_random)
            return num_random
          }

          async function getVelocity(lng, lat) {
            if (lat < -40){
              var num_random = getRandomArbitrary(4, 5)
            }
            else{
              var num_random = getRandomArbitrary(0, 4)
            }
            //console.log(num_random)
            return num_random
          }

          async function getvVelocity(lng, lat) {
            if (lat < -40){
              var num_random = getRandomArbitrary(13, 16.1)
            }
            else{
              var num_random = getRandomArbitrary(9, 13)
            }
            //console.log(num_random)
            return num_random
          }

          

          async function getElevation(lng, lat) {
            var url = 'https://api.mapbox.com/v4/mapbox.mapbox-terrain-v2/tilequery/' + lng + ',' + lat + '.json?layers=contour&limit=50&access_token=' + 'pk.eyJ1IjoiZnJhbmhvaGxiZXJnIiwiYSI6ImNraDRkZ21zMzAwOW0yenN6Ymp4bHR2aGQifQ.qI5VsvHPR_akHezVSgUFEA';


            let data = await fetch(url, {
              method: 'GET',
              headers:{
                'Content-Type': 'application/json'
              }
            }).then((response) => response.json())
              .then(data => {
                  return data;
              });
              // Get all the returned features
              var allFeatures = data.features;
              //console.log(allFeatures);
              // Create an empty array to add elevation data to
              var elevations = [];
              // For each returned feature, add elevation data to the elevations array
              for (i = 0; i < allFeatures.length; i++) {
                elevations.push(allFeatures[i].properties.ele);
              }
              //console.log(elevations);
              // In the elevations array, find the largest value
              var highestElevation = Math.min(...elevations);
              elevation = highestElevation
              //console.log(elevation);
              if (elevation == Infinity) {
                elevation = -8000
              }
              return elevation

          };


          var filters = document.getElementById('colors').filters;
          var filters_all = document.getElementById('colors').filters_all;
          showallStations();
          function showallStations(){
            myLayer.setFilter(showStateall);
          };
          showStations();
          function showStations(){
            myLayer.setFilter(showState);
          };


          function showState(feature) {

            var list = [];
            var boolean = false
            for (var i = 0; i < filters.length; i++) {
              //console.log(filters[i].value)
                if (filters[i].checked) list.push(feature.properties.tipo_energia
                    .indexOf(filters[i].value) !== -1 );
                if (filters[i].checked) boolean = boolean || feature.properties.tipo_energia.indexOf(filters[i].value) !== -1;
            }
            return boolean;

          }

          function showStateall(feature) {

            var list = [];
            var boolean = false
            if (filters_all.checked) {
              for (var i = 0; i < filters.length; i++) {
                list.push(feature.properties.tipo_energia
                      .indexOf(filters[i].value) !== -1 );
                boolean = boolean || feature.properties.tipo_energia.indexOf(filters[i].value) !== -1;
              }
              return boolean;
            }

          }

        </script>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>
        <br>

      </div>

      <br>
      <br>
      <br>
      <br>
    </div>
  </section>
  </div>
  <div class="clearfix"></div>
  </div>
</body>

</html>
